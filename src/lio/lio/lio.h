/*
Copyright 2016 Vanderbilt University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/** \file
* Autogenerated public API
*/

#ifndef ACCRE_LIO_LIO_ABSTRACT_H_INCLUDED
#define ACCRE_LIO_LIO_ABSTRACT_H_INCLUDED

#include "lio/lio_visibility.h"
#include <lio/authn.h>
#include <lio/ex3.h>
#include <lio/os.h>

#ifdef __cplusplus
extern "C" {
#endif

// Typedefs
typedef struct lio_config_t lio_config_t;
typedef struct lio_cp_file_t lio_cp_file_t;
typedef struct lio_cp_path_t lio_cp_path_t;
typedef struct lio_fd_t lio_fd_t;
typedef struct lio_file_handle_t lio_file_handle_t;
typedef struct lio_fn_t lio_fn_t;
typedef struct lio_fsck_iter_t lio_fsck_iter_t;
typedef struct lio_path_tuple_t lio_path_tuple_t;
typedef struct unified_object_iter_t unified_object_iter_t;

// Functions
LIO_API op_generic_t *lio_close_op(lio_fd_t *fd);
LIO_API op_generic_t *lio_cp_lio2local_op(lio_fd_t *sfd, FILE *dfd, ex_off_t bufsize, char *buffer, segment_rw_hints_t *rw_hints);
LIO_API op_generic_t *lio_cp_local2lio_op(FILE *sfd, lio_fd_t *dfd, ex_off_t bufsize, char *buffer, segment_rw_hints_t *rw_hints);
LIO_API lio_fsck_iter_t *lio_create_fsck_iter(lio_config_t *lc, creds_t *creds, char *path, int owner_mode, char *owner, int exnode_mode);
LIO_API os_object_iter_t *lio_create_object_iter(lio_config_t *lc, creds_t *creds, os_regex_table_t *path, os_regex_table_t *obj_regex, int object_types, os_regex_table_t *attr, int recurse_dpeth, os_attr_iter_t **it, int v_max);
LIO_API os_object_iter_t *lio_create_object_iter_alist(lio_config_t *lc, creds_t *creds, os_regex_table_t *path, os_regex_table_t *obj_regex, int object_types, int recurse_depth, char **key, void **val, int *v_size, int n_keys);
LIO_API op_generic_t *lio_create_op(lio_config_t *lc, creds_t *creds, char *path, int type, char *ex, char *id);
LIO_API void lio_destroy_fsck_iter(lio_config_t *lc, lio_fsck_iter_t *oit);
LIO_API void lio_destroy_object_iter(lio_config_t *lc, os_object_iter_t *it);
LIO_API int lio_encode_error_counts(segment_errors_t *serr, char **key, char **val, char *buf, int *v_size, int mode);
LIO_API int lio_exists(lio_config_t *lc, creds_t *creds, char *path);
LIO_API op_generic_t *lio_exists_op(lio_config_t *lc, creds_t *creds, char *path);
LIO_API op_status_t lio_file_copy_op(void *arg, int id);
LIO_API int lio_fopen_flags(char *sflags);
LIO_API op_generic_t *lio_fsck_op(lio_config_t *lc, creds_t *creds, char *fname, int ftype, int owner_mode, char *owner, int exnode_mode);
LIO_API ex_off_t lio_fsck_visited_count(lio_config_t *lc, lio_fsck_iter_t *oit);
LIO_API void lio_get_error_counts(lio_config_t *lc, segment_t *seg, segment_errors_t *serr);
LIO_API int lio_getattr(lio_config_t *lc, creds_t *creds, const char *path, char *id, char *key, void **val, int *v_size);
LIO_API op_generic_t *lio_getattr_op(lio_config_t *lc, creds_t *creds, const char *path, char *id, char *key, void **val, int *v_size);
LIO_API op_generic_t *lio_hardlink_op(lio_config_t *lc, creds_t *creds, char *src_path, char *dest_path, char *id);
LIO_API int lio_init(int *argc, char ***argv);
LIO_API op_generic_t *lio_link_op(lio_config_t *lc, creds_t *creds, int symlink, char *src_path, char *dest_path, char *id);
LIO_API op_generic_t *lio_move_op(lio_config_t *lc, creds_t *creds, char *src_path, char *dest_path);
LIO_API int lio_multiple_setattr_op(lio_config_t *lc, creds_t *creds, const char *path, char *id, char **key, void **val, int *v_size, int n);
LIO_API int lio_next_attr(lio_config_t *lc, os_attr_iter_t *it, char **key, void **val, int *v_size);
LIO_API int lio_next_fsck(lio_config_t *lc, lio_fsck_iter_t *oit, char **bad_fname, int *bad_atype);
LIO_API int lio_next_object(lio_config_t *lc, os_object_iter_t *it, char **fname, int *prefix_len);
LIO_API op_generic_t *lio_open_op(lio_config_t *lc, creds_t *creds, char *path, int mode, char *id, lio_fd_t **fd, int max_wait);
LIO_API int lio_parse_path_options(int *argc, char **argv, int auto_mode, lio_path_tuple_t *tuple, os_regex_table_t **rp, os_regex_table_t **ro);
LIO_API op_status_t lio_path_copy_op(void *arg, int id);
LIO_API void lio_path_local_make_absolute(lio_path_tuple_t *tuple);
LIO_API void lio_path_release(lio_path_tuple_t *tuple);
LIO_API lio_path_tuple_t lio_path_resolve(int auto_fuse_convert, char *startpath);
LIO_API lio_path_tuple_t lio_path_resolve_base(char *startpath);
LIO_API int lio_path_wildcard_auto_append(lio_path_tuple_t *tuple);
LIO_API void lio_print_options(FILE *fd);
LIO_API void lio_print_path_options(FILE *fd);
LIO_API op_generic_t *lio_regex_object_set_multiple_attrs_op(lio_config_t *lc, creds_t *creds, char *id, os_regex_table_t *path, os_regex_table_t *object_regex, int object_types, int recurse_depth, char **key, void **val, int *v_size, int n);
LIO_API op_generic_t *lio_remove_op(lio_config_t *lc, creds_t *creds, char *path, char *ex_optional, int ftype_optional);
LIO_API op_generic_t *lio_remove_regex_op(lio_config_t *lc, creds_t *creds, os_regex_table_t *path, os_regex_table_t *object_regex, int obj_types, int recurse_depth, int np);
LIO_API int lio_setattr(lio_config_t *lc, creds_t *creds, const char *path, char *id, char *key, void *val, int v_size);
LIO_API op_generic_t *lio_setattr_op(lio_config_t *lc, creds_t *creds, const char *path, char *id, char *key, void *val, int v_size);
LIO_API int lio_shutdown();
LIO_API int lio_unified_next_object(unified_object_iter_t *it, char **fname, int *prefix_len);
LIO_API unified_object_iter_t *lio_unified_object_iter_create(lio_path_tuple_t tuple, os_regex_table_t *path_regex, os_regex_table_t *obj_regex, int obj_types, int rd);
LIO_API void lio_unified_object_iter_destroy(unified_object_iter_t *it);
LIO_API int lioc_exists(lio_config_t *lc, creds_t *creds, char *path);
LIO_API int lioc_getattr(lio_config_t *lc, creds_t *creds, char *path, char *id, char *key, void **val, int *v_size);
LIO_API int lioc_setattr(lio_config_t *lc, creds_t *creds, char *path, char *id, char *key, void *val, int v_size);
LIO_API op_generic_t *lioc_truncate(lio_path_tuple_t *tuple, ex_off_t new_size);

#ifdef __cplusplus
}
#endif

#endif /* ^ ACCRE_LIO_LIO_ABSTRACT_H_INCLUDED ^ */ 
