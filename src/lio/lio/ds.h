/*
Copyright 2016 Vanderbilt University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/** \file
* Autogenerated public API
*/

#ifndef ACCRE_LIO_DATA_SERVICE_ABSTRACT_H_INCLUDED
#define ACCRE_LIO_DATA_SERVICE_ABSTRACT_H_INCLUDED

#include <inttypes.h>
#include "lio/lio_visibility.h"
#include <lio/ex3_types.h>

#ifdef __cplusplus
extern "C" {
#endif

// Typedefs
typedef struct data_service_fn_t data_service_fn_t;
typedef int64_t ds_int_t;
typedef void data_attr_t;
typedef void data_cap_set_t;
typedef void data_cap_t;
typedef void data_probe_t;
typedef void data_inquire_t;

// Functions

// Exported types. To be obscured
struct data_service_fn_t {
    void *priv;
    char *type;
    void (*destroy_service)(data_service_fn_t *);
    void (*translate_cap_set)(data_service_fn_t *ds, char *rid_key, char *ds_key, data_cap_set_t *cs);
    data_cap_set_t *(*new_cap_set)(data_service_fn_t *);
    void *(*cap_auto_warm)(data_service_fn_t *, data_cap_set_t *dcs);
    void (*cap_stop_warm)(data_service_fn_t *, void *warm);
    data_cap_t *(*get_cap)(data_service_fn_t *, data_cap_set_t *cs, int key);
    int (*set_cap)(data_service_fn_t *, data_cap_set_t *cs, int key, data_cap_t *cap);
    void (*destroy_cap_set)(data_service_fn_t *, data_cap_set_t *caps, int free_cap);
    data_attr_t *(*new_attr)(data_service_fn_t *);
    int (*get_attr)(data_service_fn_t *, data_attr_t *attr, int key, void *val, int size);
    int (*set_attr)(data_service_fn_t *, data_attr_t *attr, int key, void *val);
    void (*destroy_attr)(data_service_fn_t *, data_attr_t *attr);
    int (*get_default_attr)(data_service_fn_t *, data_attr_t *attr);
    int (*set_default_attr)(data_service_fn_t *, data_attr_t *attr);
    data_probe_t *(*new_probe)(data_service_fn_t *);
    int (*get_probe)(data_service_fn_t *, data_probe_t *probe, int key, void *val, int size);
    void (*destroy_probe)(data_service_fn_t *, data_probe_t *probe);
    char *(*res2rid)(data_service_fn_t *ds, char *ds_key);
    data_inquire_t *(*new_inquire)(data_service_fn_t *ds);
    void (*destroy_inquire)(data_service_fn_t *ds, data_inquire_t *space);
    ds_int_t (*res_inquire_get)(data_service_fn_t *ds, int type, data_inquire_t *space);
    op_generic_t *(*res_inquire)(data_service_fn_t *, char *res, data_attr_t *attr, data_inquire_t *space, int timeout);
    op_generic_t *(*allocate)(data_service_fn_t *, char *res, data_attr_t *attr, ds_int_t size, data_cap_set_t *caps, int timeout);
    op_generic_t *(*remove)(data_service_fn_t *, data_attr_t *dattr, data_cap_t *mcap, int timeout);
    op_generic_t *(*truncate)(data_service_fn_t *, data_attr_t *dattr, data_cap_t *mcap, ex_off_t new_size, int timeout);
    op_generic_t *(*probe)(data_service_fn_t *, data_attr_t *dattr, data_cap_t *mcap, data_probe_t *probe, int timeout);
    op_generic_t *(*modify_count)(data_service_fn_t *, data_attr_t *dattr, data_cap_t *mcap, int mode, int captype, int timeout);
    op_generic_t *(*read)(data_service_fn_t *, data_attr_t *attr, data_cap_t *rcap, ds_int_t off, tbx_tbuf_t *read, ex_off_t boff, ex_off_t len, int timeout);
    op_generic_t *(*write)(data_service_fn_t *, data_attr_t *attr, data_cap_t *wcap, ds_int_t off, tbx_tbuf_t *write, ex_off_t boff, ex_off_t len, int timeout);
    op_generic_t *(*readv)(data_service_fn_t *, data_attr_t *attr, data_cap_t *rcap, int n_iov, ex_tbx_iovec_t *iov, tbx_tbuf_t *read, ex_off_t boff, ex_off_t len, int timeout);
    op_generic_t *(*writev)(data_service_fn_t *, data_attr_t *attr, data_cap_t *wcap, int n_iov, ex_tbx_iovec_t *iov, tbx_tbuf_t *write, ex_off_t boff, ex_off_t len, int timeout);
    op_generic_t *(*append)(data_service_fn_t *, data_attr_t *attr, data_cap_t *wcap, tbx_tbuf_t *write, ex_off_t boff, ex_off_t len, int timeout);
    op_generic_t *(*copy)(data_service_fn_t *, data_attr_t *attr, int mode, int ns_type, char *ppath, data_cap_t *src_cap, ds_int_t src_off,
                          data_cap_t *dest_cap, ds_int_t dest_off, ds_int_t len, int timeout);
};

// Preprocessor functions
#define ds_read(ds, attr, rcap, off, readfn, boff, len, to) (ds)->read(ds, attr, rcap, off, readfn, boff, len, to)


#ifdef __cplusplus
}
#endif

#endif /* ^ ACCRE_LIO_DATA_SERVICE_ABSTRACT_H_INCLUDED ^ */ 
