/*
Copyright 2016 Vanderbilt University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/** \file
* Autogenerated public API
*/

#ifndef ACCRE_LIO_EX3_ABSTRACT_H_INCLUDED
#define ACCRE_LIO_EX3_ABSTRACT_H_INCLUDED

#include <apr_hash.h>
#include <apr_thread_cond.h>
#include <gop/tp.h>
#include <ibp/ibp.h>
#include <inttypes.h>
#include <lio/ds.h>
#include <lio/ex3_fwd.h>
#include <lio/visibility.h>
#include <lio/rs.h>
#include <lio/service_manager.h>
#include <tbx/iniparse.h>
#include <tbx/list.h>
#include <tbx/log.h>

// Typedefs are in ex3/fwd.h to break a potential dependency cycle

// Functions
LIO_API op_generic_t *lio_exnode_clone(thread_pool_context_t *tpc, exnode_t *ex, data_attr_t *da, exnode_t **clone_ex, void *arg, int mode, int timeout);
LIO_API exnode_t *lio_exnode_create();
LIO_API segment_t *lio_exnode_default_get(exnode_t *ex);
LIO_API int lio_exnode_deserialize(exnode_t *ex, exnode_exchange_t *exp, service_manager_t *ess);
LIO_API void lio_exnode_destroy(exnode_t *ex);
LIO_API exnode_exchange_t *lio_exnode_exchange_create(int type);
LIO_API void lio_exnode_exchange_destroy(exnode_exchange_t *exp);
LIO_API exnode_exchange_t *lio_exnode_exchange_load_file(char *fname);
LIO_API exnode_exchange_t *lio_exnode_exchange_text_parse(char *text);
LIO_API int lio_exnode_serialize(exnode_t *ex, exnode_exchange_t *exp);
LIO_API op_generic_t *lio_segment_copy(thread_pool_context_t *tpc, data_attr_t *da, segment_rw_hints_t *rw_hints, segment_t *src_seg, segment_t *dest_seg, ex_off_t src_offset, ex_off_t dest_offset, ex_off_t len, ex_off_t bufsize, char *buffer, int do_truncate, int timoeut);
LIO_API int lio_view_insert(exnode_t *ex, segment_t *view);
LIO_API service_manager_t *lio_exnode_service_set_create();
LIO_API void lio_exnode_service_set_destroy(service_manager_t *ess);

// Preprocessor constants
#define EX_TEXT             0
#define EX_PROTOCOL_BUFFERS 1

#define CLONE_STRUCTURE       0
#define CLONE_STRUCT_AND_DATA 1

#define INSPECT_QUICK_CHECK   1
#define INSPECT_SCAN_CHECK    2
#define INSPECT_FULL_CHECK    3
#define INSPECT_QUICK_REPAIR  4
#define INSPECT_SCAN_REPAIR   5
#define INSPECT_FULL_REPAIR   6
#define INSPECT_SOFT_ERRORS   7
#define INSPECT_HARD_ERRORS   8
#define INSPECT_MIGRATE       9
#define INSPECT_WRITE_ERRORS 10

#define INSPECT_FORCE_REPAIR          128   //** Make the repair even if it leads to data loss
#define INSPECT_COMMAND_BITS 15

#define SEG_SM_CREATE "segment_create"

#define INSPECT_RESULT_FULL_CHECK      512    //** Full byte-level check performed
#define INSPECT_RESULT_SOFT_ERROR     1024   //** Soft errors found
#define INSPECT_RESULT_HARD_ERROR     2048   //** Hard errors found

#define INSPECT_SOFT_ERROR_FAIL       256   //** Treat soft errors as hard
#define INSPECT_FORCE_RECONSTRUCTION  512   //** Don't use depot-depot copies for data movement.  Instead use reconstruction
#define INSPECT_FAIL_ON_ERROR        1024   //** Kick out if an unrecoverable error is hit
#define INSPECT_FIX_READ_ERROR       2048   //** Treat read errors as bad blocks for repair
#define INSPECT_FIX_WRITE_ERROR      4096   //** Treat write errors as bad blocks for repair

#define XIDT "%" PRIu64    //uint64_t
#define XOT  "%" PRId64    //int64_t
#define PXOT     PRId64    // Drop the % for formatting ..int64_t
#define XOTC PRId64

// Preprocessor macros
#define ex_iovec_single(iov, oset, nbytes) (iov)->offset = oset; (iov)->len = nbytes

// Exported types. To be obscured
struct ex_header_t {
    char *name;
    ex_id_t id;
    char *type;
    tbx_list_t *attributes;  //should be a key/value pair struct?
};

struct rid_inspect_tweak_t {
    rid_change_entry_t *rid;
    apr_hash_t *pick_pool;
};

struct inspect_args_t {
    rs_query_t *query;   //** Generic extra query
    opque_t *qs;         //** Cleanup Que on success
    opque_t *qf;         //** Cleanup Que for failure
    apr_hash_t *rid_changes;  //** List of RID space changes
    apr_thread_mutex_t *rid_lock;     //** Lock for manipulating the rid_changes table
    int n_dev_rows;
    int dev_row_replaced[128];
};

struct exnode_text_t {
    char *text;
    tbx_inip_file_t *fd;
};

struct exnode_exchange_t {
    int type;
    exnode_text_t text;
};

#ifdef __cplusplus
}
#endif

#endif /* ^ ACCRE_LIO_EX3_ABSTRACT_H_INCLUDED ^ */ 
