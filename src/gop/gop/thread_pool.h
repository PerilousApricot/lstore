/*
Copyright 2016 Vanderbilt University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/** \file
* Autogenerated public API
*/

#ifndef ACCRE_GOP_THREAD_POOL_H_INCLUDED
#define ACCRE_GOP_THREAD_POOL_H_INCLUDED

#include "gop/gop_visibility.h"
#include <gop/gop.h>
#include <gop/types.h>
#include <tbx/atomic_counter.h>
#include <apr_thread_pool.h>

#ifdef __cplusplus
extern "C" {
#endif

// Typedefs
typedef struct thread_pool_context_t thread_pool_context_t;
typedef struct thread_pool_op_t thread_pool_op_t;

// Functions
GOP_API thread_pool_context_t *gop_tp_context_create(char *tp_name, int min_threads, int max_threads, int max_recursion);
GOP_API void gop_tp_context_destroy(thread_pool_context_t *tpc);
GOP_API op_generic_t *gop_tp_op_new(thread_pool_context_t *tpc, char *que, op_status_t (*fn)(void *arg, int id), void *arg, void (*my_op_free)(void *arg), int workload);

// Preprocessor constants
#define TP_E_ERROR              OP_STATE_FAILURE
#define TP_E_OK                 OP_STATE_SUCCESS
#define TP_E_NOP               -1
#define TP_E_IGNORE            -2
#define tp_get_gop(top) &((top)->gop)
#define gop_get_tp(gop) (gop)->op->priv

// Exported types. To be obscured.
struct thread_pool_context_t {
    char *name;
    portal_context_t *pc;
    apr_thread_pool_t *tp;
    tbx_stack_t **reserve_stack;
    int *overflow_running_depth;
    tbx_atomic_unit32_t n_overflow;
    tbx_atomic_unit32_t n_ops;
    tbx_atomic_unit32_t n_completed;
    tbx_atomic_unit32_t n_started;
    tbx_atomic_unit32_t n_submitted;
    tbx_atomic_unit32_t n_direct;
    tbx_atomic_unit32_t n_running;
    int min_idle;
    int min_threads;
    int max_threads;
    int recursion_depth;
    int max_concurrency;
};
struct thread_pool_op_t {
    thread_pool_context_t *tpc;
    op_generic_t gop;
    op_data_t dop;
    op_status_t (*fn)(void *priv, int id);
    void (*my_op_free)(void *arg);
    void *arg;
    int depth;
    int parent_tid;
    int via_submit;
    int overflow_slot;
};


#ifdef __cplusplus
}
#endif

#endif /* ^ ACCRE_GOP_THREAD_POOL_H_INCLUDED ^ */ 
